-- -- Drop tables if they exist to start fresh
-- DROP TABLE IF EXISTS `order`;
-- DROP TABLE IF EXISTS Customer;
-- DROP TABLE IF EXISTS book;
-- DROP TABLE IF EXISTS publisher;
-- DROP TABLE IF EXISTS author;
-- DROP VIEW IF EXISTS BookAuthorView;
-- DROP VIEW IF EXISTS CUST;

-- -- Create parent tables first

CREATE TABLE author (
    author_no INT PRIMARY KEY AUTO_INCREMENT,
    author_name VARCHAR(100),
    country VARCHAR(50)
);

CREATE TABLE publisher (
    publisher_no INT PRIMARY KEY AUTO_INCREMENT,
    publisher_name VARCHAR(100),
    publisher_addr VARCHAR(200),
    year INT
);

-- Create dependent table book

CREATE TABLE book (
    ISBN VARCHAR(20) PRIMARY KEY,
    title VARCHAR(255),
    unit_price DECIMAL(10, 2),
    author_no INT,
    publisher_no INT,
    pub_year INT,
    FOREIGN KEY (author_no) REFERENCES author(author_no) ON DELETE CASCADE,
    FOREIGN KEY (publisher_no) REFERENCES publisher(publisher_no) ON DELETE CASCADE
);

-- Create parent table Customer
-- Using AUTO_INCREMENT for cust_no as the MySQL 'sequence' implementation
CREATE TABLE Customer (
    cust_no INT PRIMARY KEY AUTO_INCREMENT,
    cust_fname VARCHAR(50),
    cust_lname VARCHAR(50),
    cust_company VARCHAR(100),
    cust_addr VARCHAR(200),
    city VARCHAR(50),
    cust_phone VARCHAR(20)
);

-- Create dependent table 'order'
-- Note: 'order' is a keyword, so it is enclosed in backticks ``
CREATE TABLE `order` (
    order_no INT PRIMARY KEY AUTO_INCREMENT,
    cust_no INT,
    ISBN VARCHAR(20),
    qty INT,
    odate DATE,
    FOREIGN KEY (cust_no) REFERENCES Customer(cust_no) ON DELETE CASCADE,
    FOREIGN KEY (ISBN) REFERENCES book(ISBN) ON DELETE CASCADE
);

-- Create View
CREATE VIEW BookAuthorView AS
SELECT b.title, b.unit_price, a.author_name
FROM book b
JOIN author a ON b.author_no = a.author_no;

-- Create Index
CREATE INDEX idx_cust_city ON Customer(city);

-- Create Synonym
-- MySQL does not have a direct CREATE SYNONYM command like Oracle.
-- The standard equivalent is to create a VIEW.
Synonym

select col1 as syn from tab;





1. Insert at least 10 records in customer table and insert other tables accordingly.

SQL

-- Insert data into parent tables first
INSERT INTO author (author_name, country) VALUES
('Author One', 'India'),
('Author Two', 'USA'),
('Author Three', 'Australia'),
('Author Four', 'UK'),
('Author Five', 'India');

INSERT INTO publisher (publisher_name, publisher_addr, year) VALUES
('Pub A', '123 Main St', 2010),
('Pub B', '456 Oak St', 2015),
('Pub C', '789 Pine St', 2016),
('Pub D', '101 Maple St', 2000);

INSERT INTO book (ISBN, title, unit_price, author_no, publisher_no, pub_year) VALUES
('111-A', 'The SQL Guide', 299.99, 1, 1, 2015),
('222-B', 'Data Structures', 349.50, 2, 2, 2016),
('333-C', 'Advanced SQL', 499.00, 1, 3, 2015),
('444-D', 'Aussie Tales', 320.00, 3, 1, 2000),
('555-E', 'London Fog', 699.75, 4, 4, 2004),
('666-F', 'Learning MySQL', 150.00, 5, 2, 2006);

-- Insert 10 customer records
INSERT INTO Customer (cust_fname, cust_lname, cust_company, cust_addr, city, cust_phone) VALUES
('Priya', 'Sharma', 'TCS', 'A-1, FC Road', 'Pune', '9811111111'),
('Amit', 'Patel', 'Infosys', 'B-2, MG Road', 'Mumbai', '9822222222'),
('Ravi', 'Kumar', 'Wipro', 'C-3, JM Road', 'Pune', '9833333333'),
('Pooja', 'Singh', 'TCS', 'D-4, CP', 'Delhi', '9844444444'),
('Hari', 'Mehta', 'Capgemini', 'E-5, Linkin Road', 'Mumbai', '9855555555'),
('Sita', 'Reddy', 'CTS', 'F-6, T Nagar', 'Chennai', '9866666666'),
('Gita', 'Verma', 'Infosys', 'G-7, SB Road', 'Pune', '9877777777'),
('Harsh', 'Shah', 'Wipro', 'H-8, Marine Drive', 'Mumbai', '9888888888'),
('Varun', 'Bose', 'Self', 'I-9, Brigade Road', 'Bangalore', '9899999999'),
('Preeti', 'Nair', 'TCS', 'J-10, Kothrud', 'Pune', '9810101010');

-- Insert related orders
INSERT INTO `order` (cust_no, ISBN, qty, odate) VALUES
(1, '111-A', 2, '2025-01-10'),
(2, '222-B', 1, '2025-01-12'),
(3, '333-C', 5, '2025-01-15'),
(5, '444-D', 1, '2025-02-01'),
(8, '111-A', 3, '2025-02-05');

2. Display all customer details with city pune and mumbai and customer first name starting with 'p' or 'h'.

SQL

SELECT * FROM Customer
WHERE (city = 'Pune' OR city = 'Mumbai')
AND (cust_fname LIKE 'P%' OR cust_fname LIKE 'H%');
3. lists the number of different customer cities.

SQL

SELECT COUNT(DISTINCT city) AS unique_city_count
FROM Customer;
4. Give 5% increase in price of the books with publishing year 2015.

SQL

UPDATE book
SET unit_price = unit_price * 1.05
WHERE pub_year = 2015;
5. Delete customer details living in pune.

SQL

DELETE FROM Customer
WHERE city = 'Pune';
6. Find the names of authors living in India or Australia .

SQL

SELECT author_name
FROM author
WHERE country = 'India' OR country = 'Australia';
7. Find the publishers who are established between 2015 and 2016

SQL

SELECT publisher_name
FROM publisher
WHERE year BETWEEN 2015 AND 2016;
8. Find the book having maximum price and find titles of book having price between 300 and 400.

SQL

-- Book with maximum price
SELECT title, unit_price
FROM book
WHERE unit_price = (SELECT MAX(unit_price) FROM book);

-- Books with price between 300 and 400
SELECT title, unit_price
FROM book
WHERE unit_price BETWEEN 300 AND 400;
9. Display all titles of books with price and published year in decreasing order of publishing year.


SELECT title, unit_price, pub_year
FROM book
ORDER BY pub_year DESC;

10. Display title,author_no and publisher_no of all books published in 2000, 2004, 2006.



SELECT title, author_no, publisher_no
FROM book
WHERE pub_year IN (2000, 2004, 2006);


