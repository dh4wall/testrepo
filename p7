DROP TABLE IF EXISTS EMP_LOG;
DROP TABLE IF EXISTS EMPLOYEE;
DROP TABLE IF EXISTS COMPANY_INFO;

CREATE TABLE EMPLOYEE (
    Emp_Id INT PRIMARY KEY AUTO_INCREMENT,
    First_Name VARCHAR(50),
    Last_Name VARCHAR(50),
    Email VARCHAR(100),
    Phone_No VARCHAR(20),
    Hire_Date DATE,
    Job_Profile VARCHAR(50),
    Salary DECIMAL(10, 2),
    HRA DECIMAL(5, 4)
);

CREATE TABLE COMPANY_INFO (
    Emp_Count INT,
    Salary_Expenses DECIMAL(15, 2)
);

CREATE TABLE EMP_LOG (
    Log_Id INT PRIMARY KEY AUTO_INCREMENT,
    Emp_Id INT,
    Old_Salary DECIMAL(10, 2),
    New_Salary DECIMAL(10, 2),
    Edit_Time DATETIME,
    Job_Status VARCHAR(20)
);

INSERT INTO COMPANY_INFO (Emp_Count, Salary_Expenses) VALUES (0, 0.00);

Here is the complete MySQL code for the tables and all 6 triggers.

1. DDL: Create Tables
SQL

DROP TABLE IF EXISTS EMP_LOG;
DROP TABLE IF EXISTS EMPLOYEE;
DROP TABLE IF EXISTS COMPANY_INFO;

CREATE TABLE EMPLOYEE (
    Emp_Id INT PRIMARY KEY AUTO_INCREMENT,
    First_Name VARCHAR(50),
    Last_Name VARCHAR(50),
    Email VARCHAR(100),
    Phone_No VARCHAR(20),
    Hire_Date DATE,
    Job_Profile VARCHAR(50),
    Salary DECIMAL(10, 2),
    HRA DECIMAL(5, 4)
);

CREATE TABLE COMPANY_INFO (
    Emp_Count INT,
    Salary_Expenses DECIMAL(15, 2)
);

CREATE TABLE EMP_LOG (
    Log_Id INT PRIMARY KEY AUTO_INCREMENT,
    Emp_Id INT,
    Old_Salary DECIMAL(10, 2),
    New_Salary DECIMAL(10, 2),
    Edit_Time DATETIME,
    Job_Status VARCHAR(20)
);

INSERT INTO COMPANY_INFO (Emp_Count, Salary_Expenses) VALUES (0, 0.00);
2. Triggers
1. BEFORE INSERT Trigger

SQL

DROP TRIGGER IF EXISTS trg_emp_before_insert;
DELIMITER $$
CREATE TRIGGER trg_emp_before_insert
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
    SET NEW.First_Name = TRIM(NEW.First_Name);
    SET NEW.Last_Name = TRIM(NEW.Last_Name);
    SET NEW.Job_Profile = UPPER(NEW.Job_Profile);
END$$
DELIMITER ;
2. AFTER INSERT Trigger

SQL

DROP TRIGGER IF EXISTS trg_emp_after_insert;
DELIMITER $$
CREATE TRIGGER trg_emp_after_insert
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
    INSERT INTO EMP_LOG (Emp_Id, Old_Salary, New_Salary, Edit_Time, Job_Status)
    VALUES (NEW.Emp_Id, 0, NEW.Salary, NOW(), 'ACTIVE');
    
    UPDATE COMPANY_INFO
    SET Emp_Count = Emp_Count + 1,
        Salary_Expenses = Salary_Expenses + NEW.Salary;
END$$
DELIMITER ;
3. BEFORE UPDATE Trigger

SQL

DROP TRIGGER IF EXISTS trg_emp_before_update;
DELIMITER $$
CREATE TRIGGER trg_emp_before_update
BEFORE UPDATE ON EMPLOYEE
FOR EACH ROW
BEGIN
    IF NEW.HRA > 1.0 THEN
        SET NEW.HRA = NEW.HRA / 100.0;
    END IF;
    
    IF NEW.HRA != OLD.HRA THEN
        SET NEW.Salary = OLD.Salary + (OLD.Salary * NEW.HRA);
    END IF;
END$$
DELIMITER ;
4. AFTER UPDATE Trigger

SQL

DROP TRIGGER IF EXISTS trg_emp_after_update;
DELIMITER $$
CREATE TRIGGER trg_emp_after_update
AFTER UPDATE ON EMPLOYEE
FOR EACH ROW
BEGIN
    IF NEW.Salary != OLD.Salary THEN
        INSERT INTO EMP_LOG (Emp_Id, Old_Salary, New_Salary, Edit_Time)
        VALUES (NEW.Emp_Id, OLD.Salary, NEW.Salary, NOW());
        
        UPDATE COMPANY_INFO
        SET Salary_Expenses = Salary_Expenses - OLD.Salary + NEW.Salary;
    END IF;
END$$
DELIMITS ;
5. BEFORE DELETE Trigger

SQL

DROP TRIGGER IF EXISTS trg_emp_before_delete;
DELIMITER $$
CREATE TRIGGER trg_emp_before_delete
BEFORE DELETE ON EMPLOYEE
FOR EACH ROW
BEGIN
    INSERT INTO EMP_LOG (Emp_Id, Old_Salary, New_Salary, Edit_Time, Job_Status)
    VALUES (OLD.Emp_Id, OLD.Salary, 0, NOW(), 'DELETED');
END$$
DELIMITER ;
6. AFTER DELETE Trigger

SQL

DROP TRIGGER IF EXISTS trg_emp_after_delete;
DELIMITER $$
CREATE TRIGGER trg_emp_after_delete
AFTER DELETE ON EMPLOYEE
FOR EACH ROW
BEGIN
    UPDATE COMPANY_INFO
    SET Emp_Count = Emp_Count - 1,
        Salary_Expenses = Salary_Expenses - OLD.Salary;
END$$
DELIMITER ;


